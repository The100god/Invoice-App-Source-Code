import { app, BrowserWindow,ipcMain } from 'electron';
import path from 'path';
import fs from 'fs';  // Import fs for file handling

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1000,
    frame: false,
    show:true,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: false,
      contextIsolation: true,
      devTools: true,
    },
  });

  // and load the index.html of the app.
  // mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // mainWindow.loadFile(path.join(__dirname, 'public', 'splash.html'));
  const splashPath = path.join(app.getAppPath(), 'src', 'public', 'splash.html');
  mainWindow.loadFile(splashPath);
  
    setTimeout(() => {
      if (mainWindow) {
        mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
        mainWindow.once('ready-to-show', () => mainWindow?.show());
      }
    }, 3000); // Simulate a 3-second loading delay

  mainWindow.setMenuBarVisibility(false);

  mainWindow.on("closed", () => {
    mainWindow=null;
  });
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};


// Handle IPC calls from renderer process for file operations (loading and saving links)
// Path to the links.txt file
// const linksFilePath = path.join(app.getPath('userData'), 'links.txt');
const linksFilePath = path.join(app.getAppPath(), "src", "links.txt"); // Path to links.txt in src folder


// Function to read links from file
const loadLinks = (): string[] => {
  // try {
  //   if (!fs.existsSync(linksFilePath)) return [];
  //   const data = fs.readFileSync(linksFilePath, 'utf-8');
  //   return data.split('\n').filter(link => link.trim() !== '');
  // } catch (error) {
  //   console.error('Error reading links file:', error);
  //   return [];
  // }
  try {
    if (!fs.existsSync(linksFilePath)) return [];
    const data = fs.readFileSync(linksFilePath, "utf-8");
    console.log("Links loaded from file:", data); 
    return data ? JSON.parse(data) : [];
  } catch (error) {
    console.error("Error reading links file:", error);
    return [];
  }
};

// Function to save links to file
const saveLinks = (updatedLinks: string[]): void => {
  // try {
  //   fs.writeFileSync(linksFilePath, updatedLinks.join('\n'), 'utf-8');
  // } catch (error) {
  //   console.error('Error saving links:', error);
  // }
  try {
    fs.writeFileSync(linksFilePath, JSON.stringify(updatedLinks, null, 2), "utf-8");
  } catch (error) {
    console.error("Error saving links:", error);
  }
};

let maximizeToggle=false;
ipcMain.on('manualMinimize', () => {
  if (mainWindow){
    mainWindow.minimize();
  }
});

ipcMain.on('manualMaximize', () => {
  if(mainWindow){

    if (maximizeToggle) {
      mainWindow.unmaximize();
    } else {
      mainWindow.maximize();
    }
    maximizeToggle=!maximizeToggle;
  }
});

ipcMain.handle('load-links', async () => {
  return loadLinks();
});

ipcMain.handle('save-links', async (_event, updatedLinks: string[]) => {
  console.log('âœ… Received save-links event with data:', updatedLinks);
  saveLinks(updatedLinks);
});

ipcMain.on('manualClose', () => {
  if (mainWindow){
    mainWindow.close();
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
